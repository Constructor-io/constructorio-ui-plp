{"version":3,"file":"ProductCard.stories-8c01679d.js","sources":["../../src/PlpContext.tsx","../../src/components/ProductCard/index.tsx","../../src/stories/components/ProductCardExample.tsx"],"sourcesContent":["import React, { PropsWithChildren, createContext, useContext, useMemo, useState } from 'react';\nimport useCioClient from './hooks/useCioClient';\nimport { PlpContext } from './types';\n\nconst plpContext = createContext<PlpContext | null>(null);\n\n/**\n * React Hook to access state provided by PlpContextProvider.\n * Note: Should only be used by components nested under a PlpContextProvider\n */\nexport function usePlpState() {\n  return useContext(plpContext);\n}\n\nexport function PlpContextProvider(props: PropsWithChildren<{ apiKey: string }>) {\n  const { apiKey, children } = props;\n  const [cioClientOptions, setCioClientOptions] = useState({});\n  // More states\n\n  const cioClient = useCioClient(apiKey);\n\n  // To Consider: Splitting the context into separate layers\n  // Global Configurations\n  // Api Results\n  // User activity\n  const state = useMemo(\n    () => ({\n      cioClient,\n      cioClientOptions,\n      setCioClientOptions,\n    }),\n    [cioClient, cioClientOptions],\n  );\n\n  return <plpContext.Provider value={state}>{children}</plpContext.Provider>;\n}\n","import React from 'react';\nimport { usePlpState } from '../../PlpContext';\n\nexport default function ProductCard() {\n  const state = usePlpState();\n\n  return (\n    <div>\n      <div>This is a Product Card</div>\n      <div>{JSON.stringify(state?.cioClientOptions)}</div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ProductCard from '../../components/ProductCard';\nimport { DEMO_API_KEY } from '../../constants';\nimport { PlpContextProvider } from '../../PlpContext';\nimport './button.css';\n\n/**\n * This interface will be rendered as a table in Storybook\n * Attribute-level comments will be rendered as part of the \"description\" column\n * Attribute-types determine the type of control: boolean = toggle, string = text input, enum = select\n */\ninterface ProductCardExampleProps {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary?: boolean;\n  /**\n   * What background color to use\n   */\n  backgroundColor?: string;\n  /**\n   * How large should the button be?\n   */\n  size?: 'small' | 'medium' | 'large' | 'extra';\n  /**\n   * Button contents\n   */\n  label: string;\n  /**\n   * Optional click handler\n   */\n  onClick?: () => void;\n}\n\n// Note Description here will be parsed into the story description\n/**\n * A Product Card UI Component\n */\nexport default function ProductCardExample({\n  primary = false,\n  size = 'medium',\n  backgroundColor,\n  label,\n  ...props\n}: ProductCardExampleProps) {\n  return (\n    <PlpContextProvider apiKey={DEMO_API_KEY}>\n      <ProductCard />\n    </PlpContextProvider>\n  );\n}\n"],"names":["plpContext","createContext","usePlpState","useContext","PlpContextProvider","props","apiKey","children","cioClientOptions","setCioClientOptions","useState","cioClient","useCioClient","state","useMemo","jsx","ProductCard","ProductCardExample","primary","size","backgroundColor","label","DEMO_API_KEY"],"mappings":"uQAIA,MAAAA,EAAAC,EAAAA,cAAA,IAAA,EAMO,SAAAC,GAAA,CACL,OAAAC,EAAAA,WAAAH,CAAA,CACF,CAEO,SAAAI,EAAAC,EAAA,CACL,KAAA,CAAA,OAAAC,EAAA,SAAAC,CAAA,EAAAF,EACA,CAAAG,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EAGAC,EAAAC,EAAAN,CAAA,EAMAO,EAAAC,EAAA,QAAc,KAAA,CACL,UAAAH,EACL,iBAAAH,EACA,oBAAAC,CACA,GACF,CAAAE,EAAAH,CAAA,CAC4B,EAG9B,OAAAO,EAAAf,EAAA,SAAA,CAAA,MAAAa,EAAA,SAAAN,CAAA,CAAA,CACF;sUChCA,SAAwBS,GAAc,CACpC,MAAMH,EAAQX,IAEd,SACG,MACC,CAAA,SAAA,CAAAa,EAAC,OAAI,SAAsB,wBAAA,CAAA,IAC1B,MAAK,CAAA,SAAA,KAAK,UAAUF,GAAA,YAAAA,EAAO,gBAAgB,EAAE,CAChD,CAAA,CAAA,CAEJ,CC0BA,SAAAI,EAAA,CAA2C,QAAAC,EAAA,GAC/B,KAAAC,EAAA,SACH,gBAAAC,EACP,MAAAC,EACA,GAAAhB,CAEF,EAAA,CACE,OAAAU,EAAAX,EAAA,CAAA,OAAAkB,EAAA,SAAAP,EAAAC,EAAA,EAAA,CAAA,CAAA,CAKF;;;;;"}