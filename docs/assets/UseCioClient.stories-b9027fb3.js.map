{"version":3,"file":"UseCioClient.stories-b9027fb3.js","sources":["../../src/stories/hooks/UseCioClientExample.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { DEMO_API_KEY } from '../../constants';\nimport useCioClient from '../../hooks/useCioClient';\n\n/**\n * This interface will be rendered as a table in Storybook\n * Attribute-level comments will be rendered as part of the \"description\" column\n * Attribute-types determine the type of control: boolean = toggle, string = text input, enum = select\n */\ninterface UseCioClientExampleProps {\n  /**\n   * API Key used to requests results from\n   */\n  apiKey?: string;\n}\n\n// Note Description here will be translated into the story description\n/**\n * A React Hook to obtain a Constructor.io Client from our\n *  JavaScript SDK, allowing you to make Search, Browse & Tracking requests\n */\nexport default function UseCioClientExample({ apiKey }: UseCioClientExampleProps) {\n  const cioClient = useCioClient(apiKey || DEMO_API_KEY);\n  const [results, setResults] = useState({});\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const onInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value);\n  };\n\n  const runSearch = async () => {\n    const res = await cioClient.search.getSearchResults(searchQuery || '');\n    setResults(res.response.results);\n  };\n\n  return (\n    <>\n      <h1>Search Results as JSON</h1>\n      <input\n        type='text'\n        name='searchBox'\n        id='searchBox'\n        placeholder='Search query'\n        value={searchQuery}\n        onChange={onInputHandler}\n      />\n      <div>{JSON.stringify(results)}</div>\n      <div>\n        <button type='button' onClick={runSearch}>\n          Search\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport const useCioClientExampleCode = `\nimport React, { useState } from 'react';\nimport useCioClient from '../../hooks/useCioClient';\n\nconst apiKey = 'MY_API_KEY'\n\nfunction UseCioClientExample() {\n  const cioClient = useCioClient(apiKey);\n  const [results, setResults] = useState({});\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const onInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value);\n  };\n\n  const runSearch = async () => {\n    const res = await cioClient.search.getSearchResults(searchQuery || '');\n    setResults(res.response.results);\n  };\n\n  return (\n    <>\n      <h1>Search Results as JSON</h1>\n      <input\n        type='text'\n        name='searchBox'\n        id='searchBox'\n        placeholder='Search query'\n        value={searchQuery}\n        onChange={onInputHandler}\n      />\n      <div>{JSON.stringify(results)}</div>\n      <div>\n        <button type='button' onClick={runSearch}>\n          Search\n        </button>\n      </div>\n    </>\n  );\n}`;\n"],"names":["UseCioClientExample","apiKey","cioClient","useCioClient","DEMO_API_KEY","results","setResults","useState","searchQuery","setSearchQuery","onInputHandler","e","runSearch","res","jsxs","Fragment","jsx","useCioClientExampleCode"],"mappings":"iPAqBA,SAAAA,EAAA,CAAA,OAAAC,GAAA,CACE,MAAAC,EAAAC,EAAAF,GAAAG,CAAA,EACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EAEAG,EAAAC,GAAA,CACEF,EAAAE,EAAA,OAAA,KAAA,CAA6B,EAG/BC,EAAA,SAAA,CACE,MAAAC,EAAA,MAAAX,EAAA,OAAA,iBAAAM,GAAA,EAAA,EACAF,EAAAO,EAAA,SAAA,OAAA,CAA+B,EAGjC,OAAAC,EAAAC,EAAA,CAAA,SAAA,CAEIC,EAAA,KAAA,CAAA,SAAA,wBAAA,CAAA,EAA0BA,EAC1B,QAAC,CAAA,KAAA,OACM,KAAA,YACA,GAAA,YACF,YAAA,eACS,MAAAR,EACL,SAAAE,CACG,CAAA,EACZM,EAAA,MAAA,CAAA,SAAA,KAAA,UAAAX,CAAA,EAAA,EAC8BW,EAAA,MAAA,CAAA,SAAAA,EAAA,SAAA,CAAA,KAAA,SAAA,QAAAJ,EAAA,SAAA,QAAA,CAAA,CAAA,CAAA,CAK9B,CAAA,CAAA,CAGN,CAEO,MAAAK,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;"}